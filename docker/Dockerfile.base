# syntax=docker/dockerfile:1
FROM python:3.8-alpine

# define build path and set to working directory
# build path is used to install dependencies in image
ENV BUILD_PATH /build/
WORKDIR ${BUILD_PATH}

# install system dependencies
RUN apk update && \
    apk add \
    pkgconfig \
    gcc \
    g++ \
    gfortran \
    blas \
    lapack \
    patch \
    bash \
    make \
    git \
    curl && \
    pip install --upgrade pip

# build coin-or binaries
ARG INCLUDE_CBC
COPY build_coin-or.sh ${BUILD_PATH}/build_coin-or.sh
RUN chmod u+x build_coin-or.sh &&\
    ./build_coin-or.sh ${INCLUDE_CBC}

# set paths for coin-or binaries
ENV LD_LIBRARY_PATH /coin-or/lib
ENV PATH="${PATH}:/coin-or/bin"
ENV PATH="${PATH}:/coin-or/lib"

# poetry stuff
ENV PYTHONUNBUFFERED=1 \
    POETRY_VERSION=1.1.6 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=false \
    POETRY_VIRTUALENVS_CREATE=false \
    POETRY_NO_INTERACTION=1

ENV PATH="${PATH}:/root/.local/bin"

# Install Poetry and update path - respects $POETRY_VERSION & $POETRY_HOME
RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
ENV PATH="${PATH}:${POETRY_HOME}/bin"

# allow statements and log messages to immediately appear in the Knative logs in server
ENV PYTHONUNBUFFERED True

# copy files for poetry install
COPY pyproject.toml ${BUILD_PATH}/pyproject.toml
COPY poetry.lock ${BUILD_PATH}/poetry.lock

# install python and production packages
RUN poetry install --no-dev