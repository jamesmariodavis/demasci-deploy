# syntax=docker/dockerfile:1.3
ARG BASE_IMAGE_NAME_ARG
FROM ${BASE_IMAGE_NAME_ARG}

# where code will be mounted in docker container
ARG DOCKER_CODE_MOUNT_DIRECTORY_ARG

# set flags for internal use
ENV IS_PROD false
ENV IS_DEV true

# build path is used to install dependencies in image
ENV BUILD_PATH=/build
WORKDIR ${BUILD_PATH}

# install dependencies, including docker
# see "socket solution": https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
# musl-dev, linux-headers, g++ required for numpy installation
RUN apt-get update &&\
    apt-get -y install \
    git \
    docker \
    musl-dev \
    linux-headers-generic \
    g++ &&\
    pip install --upgrade pip

# install gcloud and add to path
RUN	curl -sSL https://sdk.cloud.google.com > gcl &&\
    bash gcl \
    --install-dir=/gcloud \
    --disable-prompts
ENV PATH="$PATH:/gcloud/google-cloud-sdk/bin"

# set references to use docker and gcloud in container
ARG GCLOUD_REGION_ARG
ARG GCLOUD_PROJECT_ID_ARG
ARG PROD_IMAGE_NAME_ARG
ARG GCLOUD_SERVICE_NAME_ARG
ARG GCLOUD_ALLOW_UNAUTHENTICATED_PARAM_ARG
ARG GCLOUD_SERVICE_ACCOUNT_ARG
ARG GCLOUD_APP_URL_ARG
ENV PROD_IMAGE_NAME=${PROD_IMAGE_NAME_ARG}\
    GCLOUD_PROJECT_ID=${GCLOUD_PROJECT_ID_ARG} \
    GCLOUD_REGION=${GCLOUD_REGION_ARG} \
    GCLOUD_SERVICE_NAME=${GCLOUD_SERVICE_NAME_ARG}\
    GCLOUD_ALLOW_UNAUTHENTICATED_PARAM=${GCLOUD_ALLOW_UNAUTHENTICATED_PARAM_ARG}\
    GCLOUD_APP_URL=${GCLOUD_APP_URL_ARG} \
    GCLOUD_SERVICE_ACCOUNT=${GCLOUD_SERVICE_ACCOUNT_ARG}

# configure gcloud
RUN gcloud config set run/region ${GCLOUD_REGION} &&\
    gcloud config set project ${GCLOUD_PROJECT_ID} &&\
    gcloud auth configure-docker

# set credentials path for gcloud
# https://cloud.google.com/docs/authentication/production#auth-cloud-implicit-python
ENV GOOGLE_APPLICATION_CREDENTIALS=${DOCKER_CODE_MOUNT_DIRECTORY_ARG}/google_key.json

# PORT is part of the container contract in Cloud Run
# https://cloud.google.com/run/docs/reference/container-contract
# simulate PORT contract with static reference in dev
ARG FLASK_APP_PORT_ARG
ENV PORT=${FLASK_APP_PORT_ARG}

# re-install poetry for dev use
# poetry stuff
ENV PYTHONUNBUFFERED=1 \
    POETRY_VERSION=1.1.6 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=false \
    POETRY_VIRTUALENVS_CREATE=false \
    POETRY_NO_INTERACTION=1

ENV PATH="${PATH}:/root/.local/bin"\
    PATH="${PATH}:${POETRY_HOME}/bin"

# copy files for poetry install
COPY pyproject.toml ${BUILD_PATH}/pyproject.toml
COPY poetry.lock ${BUILD_PATH}/poetry.lock

# Install Poetry, python, and libraries - respects $POETRY_VERSION & $POETRY_HOME
RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - &&\
    poetry install

# clean up build
WORKDIR /
RUN rm -rf ${BUILD_PATH}
